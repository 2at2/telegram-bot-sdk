{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nIntroduction\n\n\n\n\nTelegram Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.\nTo learn how to create and set up a bot, please consult the \nIntroduction to Bots\n and \nBot FAQ\n on official Telegram site.\n\n\n\n\nTelegram Bot API - PHP SDK\n\n\nThis is an Unofficial \nTelegram Bot API\n SDK for \nPHP\n language. Lets you develop Telegram Bots easily! Supports Laravel out of the box.\n\n\nPlease review the official \ndocumentation\n of \nTelegram Bot API\n to understand the usage better.\n\n\nRequirements\n\n\n\n\nPHP 5.5+\n\n\nComposer\n\n\nTelegram Bot API Access Token - Talk to \n@BotFather\n and generate one.\n\n\nLaravel 5 or Lumen Installation (Optional only if you want to use with either of these frameworks).\n\n\n\n\nInstallation\n\n\nThe recommended way to install the SDK is with \nComposer\n. Composer is a dependency management tool for PHP that allows you to declare the dependencies your project needs and installs them into your project.\n\n\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n\n\n\nYou can add the SDK as a dependency using the composer.phar CLI:\n\n\nphp composer.phar require irazasyed/telegram-bot-sdk ^1.0\n\n\n\nOr if you already have composer installed globally, then simply execute:\n\n\ncomposer require irazasyed/telegram-bot-sdk ^1.0\n\n\n\nAlternatively, you can specify the SDK as a dependency in your project's existing composer.json file:\n\n\n{\n    \nrequire\n: {\n      \nirazasyed/telegram-bot-sdk\n: \n^1.0\n\n    }\n}\n\n\n\n\nAfter installing, you need to require Composer's autoloader if you want to use the library standalone:\n\n\nrequire 'vendor/autoload.php';\n\n\n\n\nYou can find out more on how to install Composer, configure autoloading, and other best-practices for defining dependencies at \ngetcomposer.org\n.\n\n\nLaravel Additional Steps\n\n\nIf you're using Laravel and would like to use the SDK with it, then follow the below instructions. Otherwise, you can skip this part.\n\n\nStep 1: Add the Service Provider\n\n\nOpen \nconfig/app.php\n and, to your \nproviders\n array at the bottom, add:\n\n\nTelegram\\Bot\\Laravel\\TelegramServiceProvider::class\n\n\n\n\nStep 2: Add Facade (Optional)\n\n\nOptionally add an alias to make it easier to use the library. Open \nconfig/app.php\n and, to your \"aliases\" array at the bottom, add:\n\n\n'Telegram'  =\n Telegram\\Bot\\Laravel\\Facades\\Telegram::class\n\n\n\n\nStep 3: Publish Configuration File\n\n\nOpen your terminal window and fire the following command to publish config file to your config directory:\n\n\nphp artisan vendor:publish --provider=\"Telegram\\Bot\\Laravel\\TelegramServiceProvider\"\n\n\n\nOR\n\n\nphp artisan vendor:publish\n\n\n\nThe former command publishes config file for just this package and the latter publishes vendor config files for other packages too. Depending on what you want to do, you can use any (Doesn't really matter).\n\n\nAdditional information\n\n\n\n\nThe library takes advantage of the amazing Laravel Collection API to automatically map the data.\nSo it's a lot easier to work with the array of data. Supports all the methods listed on the \nofficial docs\n.\n\n\n\n\nAny issues, feedback, suggestions or questions please use issue tracker \nhere\n.\n\n\nContributing\n\n\nThank you for considering contributing to the project. Please review the \nCONTRIBUTING\n guidelines before submitting any pull requests.\n\n\nThanks to \nAll Contributors\n.\n\n\nLicense\n\n\nThis project is released under the \nBSD 3-Clause\n License.", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/#introduction", 
            "text": "Telegram Bot API is an HTTP-based interface created for developers keen on building bots for Telegram.\nTo learn how to create and set up a bot, please consult the  Introduction to Bots  and  Bot FAQ  on official Telegram site.   Telegram Bot API - PHP SDK  This is an Unofficial  Telegram Bot API  SDK for  PHP  language. Lets you develop Telegram Bots easily! Supports Laravel out of the box.  Please review the official  documentation  of  Telegram Bot API  to understand the usage better.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#requirements", 
            "text": "PHP 5.5+  Composer  Telegram Bot API Access Token - Talk to  @BotFather  and generate one.  Laravel 5 or Lumen Installation (Optional only if you want to use with either of these frameworks).", 
            "title": "Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "The recommended way to install the SDK is with  Composer . Composer is a dependency management tool for PHP that allows you to declare the dependencies your project needs and installs them into your project.  # Install Composer\ncurl -sS https://getcomposer.org/installer | php  You can add the SDK as a dependency using the composer.phar CLI:  php composer.phar require irazasyed/telegram-bot-sdk ^1.0  Or if you already have composer installed globally, then simply execute:  composer require irazasyed/telegram-bot-sdk ^1.0  Alternatively, you can specify the SDK as a dependency in your project's existing composer.json file:  {\n     require : {\n       irazasyed/telegram-bot-sdk :  ^1.0 \n    }\n}  After installing, you need to require Composer's autoloader if you want to use the library standalone:  require 'vendor/autoload.php';  You can find out more on how to install Composer, configure autoloading, and other best-practices for defining dependencies at  getcomposer.org .", 
            "title": "Installation"
        }, 
        {
            "location": "/#laravel-additional-steps", 
            "text": "If you're using Laravel and would like to use the SDK with it, then follow the below instructions. Otherwise, you can skip this part.  Step 1: Add the Service Provider  Open  config/app.php  and, to your  providers  array at the bottom, add:  Telegram\\Bot\\Laravel\\TelegramServiceProvider::class  Step 2: Add Facade (Optional)  Optionally add an alias to make it easier to use the library. Open  config/app.php  and, to your \"aliases\" array at the bottom, add:  'Telegram'  =  Telegram\\Bot\\Laravel\\Facades\\Telegram::class  Step 3: Publish Configuration File  Open your terminal window and fire the following command to publish config file to your config directory:  php artisan vendor:publish --provider=\"Telegram\\Bot\\Laravel\\TelegramServiceProvider\"  OR  php artisan vendor:publish  The former command publishes config file for just this package and the latter publishes vendor config files for other packages too. Depending on what you want to do, you can use any (Doesn't really matter).", 
            "title": "Laravel Additional Steps"
        }, 
        {
            "location": "/#additional-information", 
            "text": "The library takes advantage of the amazing Laravel Collection API to automatically map the data.\nSo it's a lot easier to work with the array of data. Supports all the methods listed on the  official docs .   Any issues, feedback, suggestions or questions please use issue tracker  here .", 
            "title": "Additional information"
        }, 
        {
            "location": "/#contributing", 
            "text": "Thank you for considering contributing to the project. Please review the  CONTRIBUTING  guidelines before submitting any pull requests.  Thanks to  All Contributors .", 
            "title": "Contributing"
        }, 
        {
            "location": "/#license", 
            "text": "This project is released under the  BSD 3-Clause  License.", 
            "title": "License"
        }, 
        {
            "location": "/api-docs/", 
            "text": "API Docs\n\n\nYou can visit \nthis\n page for full API Docs - \nhttps://irazasyed.github.io/telegram-bot-sdk/api/", 
            "title": "API"
        }, 
        {
            "location": "/api-docs/#api-docs", 
            "text": "You can visit  this  page for full API Docs -  https://irazasyed.github.io/telegram-bot-sdk/api/", 
            "title": "API Docs"
        }, 
        {
            "location": "/usage/initial-setup/", 
            "text": "Initial Setup\n\n\nAll the methods listed on \nTelegram Bot API\n page are fully supported by this SDK.\n\n\nStandalone Setup\n\n\nIn order to use the library in your project, You need to install the SDK with Composer. Refer the \ninstallation\n page for more details on how to install with Composer and autoload in your project.\n\n\nInitialize Library\n\n\nFirst step is to initialize the library. Once you do that, You'll get access to all the available API Methods to make requests to Telegram.\n\n\nuse Telegram\\Bot\\Api;\n\n$telegram = new Api('BOT TOKEN');\n\n\n\n\nLaravel Setup\n\n\nOpen \ntelegram.php\n configuration file in \nconfig\n directory and set the \nbot_token\n with your Telegram's Bot Access Token or you could also set environment variable \nTELEGRAM_BOT_TOKEN\n with the appropriate value.\nRefer the configuration file for other default configuration settings.\n\n\nConfig Overview\n\n\nOpen the config file for detailed comments for each option.\n\n\nSet your Telegram Bot Access Token in \nbot_token\n key \n[REQUIRED]\n\n\n'bot_token' =\n '1234:ABCD'\n\n\n\n\nAll other configs are optional, use as per your requirements.\n\n\nTest Bot\n\n\nA simple method for testing your bot's auth token.\nReturns basic information about the bot in form of a User object.\n\n\nSee \ngetMe\n docs for more details.\n\n\n// Standalone\n$response = $telegram-\ngetMe();\n\n// Laravel\n$response = Telegram::getMe();\n\n$botId = $response-\ngetId();\n$firstName = $response-\ngetFirstName();\n$username = $response-\ngetUsername();", 
            "title": "Initial Setup"
        }, 
        {
            "location": "/usage/initial-setup/#initial-setup", 
            "text": "All the methods listed on  Telegram Bot API  page are fully supported by this SDK.", 
            "title": "Initial Setup"
        }, 
        {
            "location": "/usage/initial-setup/#standalone-setup", 
            "text": "In order to use the library in your project, You need to install the SDK with Composer. Refer the  installation  page for more details on how to install with Composer and autoload in your project.  Initialize Library  First step is to initialize the library. Once you do that, You'll get access to all the available API Methods to make requests to Telegram.  use Telegram\\Bot\\Api;\n\n$telegram = new Api('BOT TOKEN');", 
            "title": "Standalone Setup"
        }, 
        {
            "location": "/usage/initial-setup/#laravel-setup", 
            "text": "Open  telegram.php  configuration file in  config  directory and set the  bot_token  with your Telegram's Bot Access Token or you could also set environment variable  TELEGRAM_BOT_TOKEN  with the appropriate value.\nRefer the configuration file for other default configuration settings.  Config Overview  Open the config file for detailed comments for each option.  Set your Telegram Bot Access Token in  bot_token  key  [REQUIRED]  'bot_token' =  '1234:ABCD'  All other configs are optional, use as per your requirements.", 
            "title": "Laravel Setup"
        }, 
        {
            "location": "/usage/initial-setup/#test-bot", 
            "text": "A simple method for testing your bot's auth token.\nReturns basic information about the bot in form of a User object.  See  getMe  docs for more details.  // Standalone\n$response = $telegram- getMe();\n\n// Laravel\n$response = Telegram::getMe();\n\n$botId = $response- getId();\n$firstName = $response- getFirstName();\n$username = $response- getUsername();", 
            "title": "Test Bot"
        }, 
        {
            "location": "/usage/available-methods-examples/", 
            "text": "Available Methods \n Examples\n\n\nThe library supports all the methods listed on Telegram Bot API docs \npage\n.\n\n\nSend a Message\n\n\nSee \nsendMessage\n docs for a list of supported parameters and other info.\n\n\n$response = $telegram-\nsendMessage('CHAT_ID', 'Hello World');\n$messageId = $response-\ngetMessageId();\n\n\n\n\nSend a Photo\n\n\nSee \nsendPhoto\n docs for a list of supported parameters and other info.\n\n\n$response = $telegram-\nsendPhoto('CHAT_ID', 'path/to/photo.jpg', 'Some caption');\n$messageId = $response-\ngetMessageId();\n\n\n\n\nForward a Message\n\n\nSee \nforwardMessage\n docs for a list of supported parameters and other info.\n\n\n$response = $telegram-\nforwardMessage('CHAT_ID', 'FROM_CHAT_ID', 'MESSAGE_ID');\n$messageId = $response-\ngetMessageId();\n\n\n\n\nSend a Chat Action\n\n\nSee \nsendChatAction\n docs for a list of supported actions and other info.\n\n\n$telegram-\nsendChatAction('CHAT_ID', 'upload_photo');\n\n\n\n\nGet User Profile Photos\n\n\nSee \ngetUserProfilePhotos\n docs for a list of supported parameters and other info.\n\n\n$response = $telegram-\ngetUserProfilePhotos('USER_ID');\n$photos_count = $response-\ngetTotalCount();\n$photos = $response-\ngetPhotos();\n\n\n\n\nGet Updates\n\n\nSee \ngetUpdates\n docs for a list of supported parameters and other info.\n\n\n$updates = $telegram-\ngetUpdates();", 
            "title": "Available Methods & Examples"
        }, 
        {
            "location": "/usage/available-methods-examples/#available-methods-examples", 
            "text": "The library supports all the methods listed on Telegram Bot API docs  page .", 
            "title": "Available Methods &amp; Examples"
        }, 
        {
            "location": "/usage/available-methods-examples/#send-a-message", 
            "text": "See  sendMessage  docs for a list of supported parameters and other info.  $response = $telegram- sendMessage('CHAT_ID', 'Hello World');\n$messageId = $response- getMessageId();", 
            "title": "Send a Message"
        }, 
        {
            "location": "/usage/available-methods-examples/#send-a-photo", 
            "text": "See  sendPhoto  docs for a list of supported parameters and other info.  $response = $telegram- sendPhoto('CHAT_ID', 'path/to/photo.jpg', 'Some caption');\n$messageId = $response- getMessageId();", 
            "title": "Send a Photo"
        }, 
        {
            "location": "/usage/available-methods-examples/#forward-a-message", 
            "text": "See  forwardMessage  docs for a list of supported parameters and other info.  $response = $telegram- forwardMessage('CHAT_ID', 'FROM_CHAT_ID', 'MESSAGE_ID');\n$messageId = $response- getMessageId();", 
            "title": "Forward a Message"
        }, 
        {
            "location": "/usage/available-methods-examples/#send-a-chat-action", 
            "text": "See  sendChatAction  docs for a list of supported actions and other info.  $telegram- sendChatAction('CHAT_ID', 'upload_photo');", 
            "title": "Send a Chat Action"
        }, 
        {
            "location": "/usage/available-methods-examples/#get-user-profile-photos", 
            "text": "See  getUserProfilePhotos  docs for a list of supported parameters and other info.  $response = $telegram- getUserProfilePhotos('USER_ID');\n$photos_count = $response- getTotalCount();\n$photos = $response- getPhotos();", 
            "title": "Get User Profile Photos"
        }, 
        {
            "location": "/usage/available-methods-examples/#get-updates", 
            "text": "See  getUpdates  docs for a list of supported parameters and other info.  $updates = $telegram- getUpdates();", 
            "title": "Get Updates"
        }, 
        {
            "location": "/usage/async/", 
            "text": "Asynchronous Requests (Non-Blocking)\n\n\nBy default, sending an API request to Telegram Bot API will be a synchronous request, and block the execution of the script until it gets a response from the server or timeouts after 60 secs (throwing a Guzzle exception).\nHowever, an asynchronous non-blocking request can be sent by calling \nsetAsyncRequest(true)\n before making any API request or at the time of initializing the library:\n\n\nMake Specific API Requests Async\n\n\n// When building the API request, just make a call to the setAsyncRequest method passing true\n// now making a request won't block the execution of the script.\n// Similarly if you want to do the other way around, just pass false (Make a specific API call a synchronous request).\n\n// Standalone\n$telegram\n   -\nsetAsyncRequest(true)\n   -\nsendPhoto('CHAT_ID', 'path/to/photo.jpg');\n\n// Laravel\nTelegram::setAsyncRequest(true)\n          -\nsendPhoto('CHAT_ID', 'path/to/photo.jpg');\n\n\n\n\nMake All API Requests Async\n\n\nYou can make all API requests async (non-blocking), just apply the changes as per the below instructions.\n\n\nStandalone\n\n\nJust pass the second parameter a boolean value \ntrue\n. Defaults to \nfalse\n.\n\n\nuse Telegram\\Bot\\Api;\n\n$telegram = new Api('BOT TOKEN', true);\n\n\n\n\nLaravel\n\n\nTo make all API requests async in Laravel, Simply set the \nasync_requests\n option to \ntrue\n in \ntelegram.php\n configuration file. You can also set the value in env variable \nTELEGRAM_ASYNC_REQUESTS\n.\n\n\nIf you want all the requests to be asynchronous non-blocking requests and only a specific call to be synchronous request, you can pass the \nsetAsyncRequest(false)\n before making an API call, see above for example.\n\n\nThis means that we are sending the request and not waiting for a response.\nThe \nTelegramResponse\n object that you will get back has NULL for HTTP status code.", 
            "title": "Asynchronous Requests"
        }, 
        {
            "location": "/usage/async/#asynchronous-requests-non-blocking", 
            "text": "By default, sending an API request to Telegram Bot API will be a synchronous request, and block the execution of the script until it gets a response from the server or timeouts after 60 secs (throwing a Guzzle exception).\nHowever, an asynchronous non-blocking request can be sent by calling  setAsyncRequest(true)  before making any API request or at the time of initializing the library:", 
            "title": "Asynchronous Requests (Non-Blocking)"
        }, 
        {
            "location": "/usage/async/#make-specific-api-requests-async", 
            "text": "// When building the API request, just make a call to the setAsyncRequest method passing true\n// now making a request won't block the execution of the script.\n// Similarly if you want to do the other way around, just pass false (Make a specific API call a synchronous request).\n\n// Standalone\n$telegram\n   - setAsyncRequest(true)\n   - sendPhoto('CHAT_ID', 'path/to/photo.jpg');\n\n// Laravel\nTelegram::setAsyncRequest(true)\n          - sendPhoto('CHAT_ID', 'path/to/photo.jpg');", 
            "title": "Make Specific API Requests Async"
        }, 
        {
            "location": "/usage/async/#make-all-api-requests-async", 
            "text": "You can make all API requests async (non-blocking), just apply the changes as per the below instructions.  Standalone  Just pass the second parameter a boolean value  true . Defaults to  false .  use Telegram\\Bot\\Api;\n\n$telegram = new Api('BOT TOKEN', true);  Laravel  To make all API requests async in Laravel, Simply set the  async_requests  option to  true  in  telegram.php  configuration file. You can also set the value in env variable  TELEGRAM_ASYNC_REQUESTS .  If you want all the requests to be asynchronous non-blocking requests and only a specific call to be synchronous request, you can pass the  setAsyncRequest(false)  before making an API call, see above for example.  This means that we are sending the request and not waiting for a response.\nThe  TelegramResponse  object that you will get back has NULL for HTTP status code.", 
            "title": "Make All API Requests Async"
        }, 
        {
            "location": "/usage/commands/", 
            "text": "Commands\n\n\nIntroduction\n\n\nThe SDK comes with a commands system that lets you handle and manage all inbound commands seamlessly and efficiently. The Commands Handler System is smart enough to trigger the right command when it sees one in an inbound message from Telegram. The commands are lazy loaded and processed on-demand, So registering them won't cause any performance issues to your application.\n\n\nLets get started with writing and registering our command.\n\n\nWriting Commands\n\n\nFirst step before the Commands Handler System can start handling all your inbound commands is to write one. All the commands you write should extend the \nTelegram\\Bot\\Commands\\Command\n class which is an implementation of \nTelegram\\Bot\\Commands\\CommandInterface\n. You may store your custom commands in any directory as long as your commands can be autoloaded based on your \ncomposer.json\n settings and are registered properly with the Commands Handler System.\n\n\nSo for this example, Will build a \n/start\n command which will be triggered when a user sends \n/start\n or when they start an interaction with your bot for the first time.\n\n\nCommand Structure\n\n\nYou should always add the \n$name\n and \n$description\n properties of the class with the appropriate values, which will be used when displaying a list of commands as well as when processing inbound message.\n\n\nExample Command:\n\n\n?php\n\nnamespace Vendor\\App\\Commands;\n\nuse Telegram\\Bot\\Actions;\nuse Telegram\\Bot\\Commands\\Command;\n\nclass StartCommand extends Command\n{\n    /**\n     * @var string Command Name\n     */\n    protected $name = \nstart\n;\n\n    /**\n     * @var string Command Description\n     */\n    protected $description = \nStart Command to get you started\n;\n\n    /**\n     * @inheritdoc\n     */\n    public function handle($arguments)\n    {\n        // This will send a message using `sendMessage` method behind the scenes to\n        // the user/chat id who triggered this command.\n        // `replyWith\nMessage|Photo|Audio|Video|Voice|Document|Sticker|Location|ChatAction\n()` all the available methods are dynamically\n        // handled when you replace `send\nMethod\n` with `replyWith` and use all their parameters except chat_id.\n        $this-\nreplyWithMessage('Hello! Welcome to our bot, Here are our available commands:');\n\n        // This will update the chat status to typing...\n        $this-\nreplyWithChatAction(Actions::TYPING);\n\n        // This will prepare a list of available commands and send the user.\n        // First, Get an array of all registered commands\n        // They'll be in 'command-name' =\n 'Command Handler Class' format.\n        $commands = $this-\ngetTelegram()-\ngetCommands();\n\n        // Build the list\n        $response = '';\n        foreach ($commands as $name =\n $command) {\n            $response .= sprintf('/%s - %s' . PHP_EOL, $name, $command-\ngetDescription());\n        }\n\n        // Reply with the commands list\n        $this-\nreplyWithMessage($response);\n\n        // Trigger another command dynamically from within this command\n        // When you want to chain multiple commands within one or process the request further.\n        // The method supports second parameter arguments which you can optionally pass, By default\n        // it'll pass the same arguments that are received for this command originally.\n        $this-\ntriggerCommand('subscribe');\n    }\n}\n\n\n\n\nNotice, The \n$name\n of the command is \nstart\n so when a user sends \n/start\n, this class would be triggered.\nSo always make sure the name is correct and in lowercase. The description is helpful when you get a list of all the available commands either with the \n/help\n command or for other purposes using the \ngetCommands()\n method.\n\n\nAll the commands you create should implement the \nhandle($arguments)\n method which would be called when a user sends the command and will be passed with the arguments (Currently we don't break the arguments into an array but you can use methods like \nexplode()\n to break by space and use it for whatever purposes).\n\n\nIn your handle method, You also get access to \ngetTelegram()\n and \ngetUpdate()\n methods which gives you access to the super class and the original update object sent from Telegram.\n\n\nThe commands system as you can see in above example command comes with a few helper methods (They're optional just to help you and make things easier):\n\n\n\n\nreplyWith\nMessage|Photo|Audio|Video|Voice|Document|Sticker|Location|ChatAction\n()\n - Basically, All the \nsend\nAPI Method\n are supported and are pre-filled with the chat id of the message that triggered the command. All other params of each method can easily be passed to it like you would normally as per the docs (Exclude \nchat_id\n since it already is adding behind the scenes).\n\n\ntriggerCommand(\nCommand Name\n)\n - This is useful to chain a bunch of commands within a command. Say for example, I want to fire the \n/subscribe\n command that is registered already with the Commands Handler System. By using this method, I can tell the system to simulate the \n/subscribe\n command as if the user sent it and i can then process such request normally within that command. I would use this method to trigger that command in my \n/start\n command for example. So as soon as the user sends \n/start\n or interacts with my bot for the first time, they would also be automatically triggering \n/subscribe\n command which for example could be subscribing them for some alerts from your bot. The function supports second param called \n$arguments\n which is optional and can be used to send some arguments from the original command (The one which is triggering) to the other command. By default, The arguments would be the same as what Telegram originally sent it.\n\n\n\n\nIf a command is not registered but the user fires one (Lets say an invalid command), By default the system will look for a help command if its registered and if yes, then it'll be triggered. So the default help command class if you were to use would respond the user with the available list of commands with description.\n\n\nRegistering Commands\n\n\nThe first step is to register our commands after we create one.\n\n\nRegistering Single Command\n\n\nIn order to register a single command, we can make use of \naddCommand()\n method which supports either the command object or full path to the command itself and it'll automatically initialize it behind the scenes.\n\n\nStandalone:\n\n\n$telegram-\naddCommand(Telegram\\Bot\\Commands\\HelpCommand::class);\n\n// OR\n\n$command = new Telegram\\Bot\\Commands\\HelpCommand();\n$telegram-\naddCommand($command);\n\n\n\n\nLaravel:\n\nRegistering Commands in Laravel is actually very easy. Simply open the \ntelegram.php\n configuration file and add all your commands full path to the \ncommands\n array and the SDK will take care of the rest.\n\n\nExample:\n\n\n'commands' =\n [\n    Telegram\\Bot\\Commands\\HelpCommand::class,\n    Vendor\\Project\\Commands\\StartCommand::class,\n    Vendor\\Project\\Commands\\SettingsCommand::class,\n]\n\n\n\n\nBy default, The SDK registers a Help Command in Laravel, But you can either choose to disable it by simply commenting out the HelpCommand line/removing it completely or Replace it with your own Help Command.\n\n\nYou can also register commands on-fly using the same \naddCommand()\n method like above in Standalone example.\n\n\nExample:\n\n\nTelegram::addCommand(Telegram\\Bot\\Commands\\HelpCommand::class);\n\n// OR\n\n$command = new Telegram\\Bot\\Commands\\HelpCommand();\nTelegram::addCommand($command);\n\n\n\n\nRegistering Multiple Commands\n\n\nTo register multiple commands, You can pass an array with all the commands that has to be registered to the \naddCommands()\n method.\n\n\nExample:\n\n\n// Standalone\n$telegram-\naddCommands([\n   Telegram\\Bot\\Commands\\HelpCommand::class,\n   Vendor\\Project\\TestCommand::class,\n   Vendor\\Project\\StartCommand::class,\n]);\n\n// Laravel\nTelegram::addCommands([\n   Telegram\\Bot\\Commands\\HelpCommand::class,\n   Vendor\\Project\\TestCommand::class,\n   Vendor\\Project\\StartCommand::class,\n]);\n\n\n\n\n\n\nNote:\n All commands are lazy loaded.\n\n\n\n\nHandling Commands\n\n\nNow to handle inbound commands, You have to use the new method called \ncommandsHandler()\n.\nHere's an example used with a Webhook registered:\n\n\n// Laravel\nRoute::post('/\ntoken\n/webhook', function () {\n    Telegram::commandsHandler(true);\n\n    return 'ok';\n});\n\n// Standalone\n$telegram-\ncommandsHandler(true);\n\n\n\n\nThe method accepts a boolean value, Defaults to \nfalse\n which means the commands should manually be processed using \ngetUpdates()\n method. Set it to \ntrue\n to process incoming updates sent from Telegram to your Webhook. The commands handler system will go through the incoming Update object to see if there is any command that matches the registered once and process them accordingly.", 
            "title": "Commands System"
        }, 
        {
            "location": "/usage/commands/#commands", 
            "text": "", 
            "title": "Commands"
        }, 
        {
            "location": "/usage/commands/#introduction", 
            "text": "The SDK comes with a commands system that lets you handle and manage all inbound commands seamlessly and efficiently. The Commands Handler System is smart enough to trigger the right command when it sees one in an inbound message from Telegram. The commands are lazy loaded and processed on-demand, So registering them won't cause any performance issues to your application.  Lets get started with writing and registering our command.", 
            "title": "Introduction"
        }, 
        {
            "location": "/usage/commands/#writing-commands", 
            "text": "First step before the Commands Handler System can start handling all your inbound commands is to write one. All the commands you write should extend the  Telegram\\Bot\\Commands\\Command  class which is an implementation of  Telegram\\Bot\\Commands\\CommandInterface . You may store your custom commands in any directory as long as your commands can be autoloaded based on your  composer.json  settings and are registered properly with the Commands Handler System.  So for this example, Will build a  /start  command which will be triggered when a user sends  /start  or when they start an interaction with your bot for the first time.  Command Structure  You should always add the  $name  and  $description  properties of the class with the appropriate values, which will be used when displaying a list of commands as well as when processing inbound message.  Example Command:  ?php\n\nnamespace Vendor\\App\\Commands;\n\nuse Telegram\\Bot\\Actions;\nuse Telegram\\Bot\\Commands\\Command;\n\nclass StartCommand extends Command\n{\n    /**\n     * @var string Command Name\n     */\n    protected $name =  start ;\n\n    /**\n     * @var string Command Description\n     */\n    protected $description =  Start Command to get you started ;\n\n    /**\n     * @inheritdoc\n     */\n    public function handle($arguments)\n    {\n        // This will send a message using `sendMessage` method behind the scenes to\n        // the user/chat id who triggered this command.\n        // `replyWith Message|Photo|Audio|Video|Voice|Document|Sticker|Location|ChatAction ()` all the available methods are dynamically\n        // handled when you replace `send Method ` with `replyWith` and use all their parameters except chat_id.\n        $this- replyWithMessage('Hello! Welcome to our bot, Here are our available commands:');\n\n        // This will update the chat status to typing...\n        $this- replyWithChatAction(Actions::TYPING);\n\n        // This will prepare a list of available commands and send the user.\n        // First, Get an array of all registered commands\n        // They'll be in 'command-name' =  'Command Handler Class' format.\n        $commands = $this- getTelegram()- getCommands();\n\n        // Build the list\n        $response = '';\n        foreach ($commands as $name =  $command) {\n            $response .= sprintf('/%s - %s' . PHP_EOL, $name, $command- getDescription());\n        }\n\n        // Reply with the commands list\n        $this- replyWithMessage($response);\n\n        // Trigger another command dynamically from within this command\n        // When you want to chain multiple commands within one or process the request further.\n        // The method supports second parameter arguments which you can optionally pass, By default\n        // it'll pass the same arguments that are received for this command originally.\n        $this- triggerCommand('subscribe');\n    }\n}  Notice, The  $name  of the command is  start  so when a user sends  /start , this class would be triggered.\nSo always make sure the name is correct and in lowercase. The description is helpful when you get a list of all the available commands either with the  /help  command or for other purposes using the  getCommands()  method.  All the commands you create should implement the  handle($arguments)  method which would be called when a user sends the command and will be passed with the arguments (Currently we don't break the arguments into an array but you can use methods like  explode()  to break by space and use it for whatever purposes).  In your handle method, You also get access to  getTelegram()  and  getUpdate()  methods which gives you access to the super class and the original update object sent from Telegram.  The commands system as you can see in above example command comes with a few helper methods (They're optional just to help you and make things easier):   replyWith Message|Photo|Audio|Video|Voice|Document|Sticker|Location|ChatAction ()  - Basically, All the  send API Method  are supported and are pre-filled with the chat id of the message that triggered the command. All other params of each method can easily be passed to it like you would normally as per the docs (Exclude  chat_id  since it already is adding behind the scenes).  triggerCommand( Command Name )  - This is useful to chain a bunch of commands within a command. Say for example, I want to fire the  /subscribe  command that is registered already with the Commands Handler System. By using this method, I can tell the system to simulate the  /subscribe  command as if the user sent it and i can then process such request normally within that command. I would use this method to trigger that command in my  /start  command for example. So as soon as the user sends  /start  or interacts with my bot for the first time, they would also be automatically triggering  /subscribe  command which for example could be subscribing them for some alerts from your bot. The function supports second param called  $arguments  which is optional and can be used to send some arguments from the original command (The one which is triggering) to the other command. By default, The arguments would be the same as what Telegram originally sent it.   If a command is not registered but the user fires one (Lets say an invalid command), By default the system will look for a help command if its registered and if yes, then it'll be triggered. So the default help command class if you were to use would respond the user with the available list of commands with description.", 
            "title": "Writing Commands"
        }, 
        {
            "location": "/usage/commands/#registering-commands", 
            "text": "The first step is to register our commands after we create one.  Registering Single Command  In order to register a single command, we can make use of  addCommand()  method which supports either the command object or full path to the command itself and it'll automatically initialize it behind the scenes.  Standalone:  $telegram- addCommand(Telegram\\Bot\\Commands\\HelpCommand::class);\n\n// OR\n\n$command = new Telegram\\Bot\\Commands\\HelpCommand();\n$telegram- addCommand($command);  Laravel: \nRegistering Commands in Laravel is actually very easy. Simply open the  telegram.php  configuration file and add all your commands full path to the  commands  array and the SDK will take care of the rest.  Example:  'commands' =  [\n    Telegram\\Bot\\Commands\\HelpCommand::class,\n    Vendor\\Project\\Commands\\StartCommand::class,\n    Vendor\\Project\\Commands\\SettingsCommand::class,\n]  By default, The SDK registers a Help Command in Laravel, But you can either choose to disable it by simply commenting out the HelpCommand line/removing it completely or Replace it with your own Help Command.  You can also register commands on-fly using the same  addCommand()  method like above in Standalone example.  Example:  Telegram::addCommand(Telegram\\Bot\\Commands\\HelpCommand::class);\n\n// OR\n\n$command = new Telegram\\Bot\\Commands\\HelpCommand();\nTelegram::addCommand($command);  Registering Multiple Commands  To register multiple commands, You can pass an array with all the commands that has to be registered to the  addCommands()  method.  Example:  // Standalone\n$telegram- addCommands([\n   Telegram\\Bot\\Commands\\HelpCommand::class,\n   Vendor\\Project\\TestCommand::class,\n   Vendor\\Project\\StartCommand::class,\n]);\n\n// Laravel\nTelegram::addCommands([\n   Telegram\\Bot\\Commands\\HelpCommand::class,\n   Vendor\\Project\\TestCommand::class,\n   Vendor\\Project\\StartCommand::class,\n]);   Note:  All commands are lazy loaded.", 
            "title": "Registering Commands"
        }, 
        {
            "location": "/usage/commands/#handling-commands", 
            "text": "Now to handle inbound commands, You have to use the new method called  commandsHandler() .\nHere's an example used with a Webhook registered:  // Laravel\nRoute::post('/ token /webhook', function () {\n    Telegram::commandsHandler(true);\n\n    return 'ok';\n});\n\n// Standalone\n$telegram- commandsHandler(true);  The method accepts a boolean value, Defaults to  false  which means the commands should manually be processed using  getUpdates()  method. Set it to  true  to process incoming updates sent from Telegram to your Webhook. The commands handler system will go through the incoming Update object to see if there is any command that matches the registered once and process them accordingly.", 
            "title": "Handling Commands"
        }, 
        {
            "location": "/usage/keyboards/", 
            "text": "Keyboards\n\n\n\n\nOne of the coolest things about Telegram Bot API are the new custom keyboards. Whenever your bot sends a message, it can pass along a special keyboard with predefined reply options. Telegram apps that receive the message will display your keyboard to the user. Tapping any of the buttons will immediately send the respective command. This way you can drastically simplify user interaction with your bot.\n\n\nTelegram currently support text and emoji for your buttons. Here are some custom keyboard examples:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReply Keyboard Markup\n\n\nThe below example will send a message and automatically show a custom keyboard.\nSince we passed third parameter as true, the keyboard will be shown only once.\n\n\nSee \nReplyKeyboardMarkup\n docs for a list of supported parameters and other info.\n\n\nExample:\n\n\n$keyboard = [\n    ['7', '8', '9'],\n    ['4', '5', '6'],\n    ['1', '2', '3'],\n         ['0']\n];\n\n$reply_markup = $telegram-\nreplyKeyboardMarkup($keyboard, true, true);\n$response = $telegram-\nsendMessage('CHAT_ID', 'Hello World', false, null, $reply_markup);\n\n$messageId = $response-\ngetMessageId();\n\n\n\n\nReply Keyboard Hide\n\n\nTelegram clients will hide the current custom keyboard and display the default letter-keyboard.\nSee \nReplyKeyboardHide\n docs for more info.\n\n\nSupported Parameter: boolean \n$selective\n defaults to \nfalse\n.\n\n\n$reply_markup = $telegram-\nreplyKeyboardHide();\n$response = $telegram-\nsendMessage('CHAT_ID', 'Hello World', false, null, $reply_markup);\n\n\n\n\nForce Reply\n\n\nShows reply interface to the user, as if they manually selected the bot\u2018s message and tapped \u2019Reply'.\nSee \nForceReply\n docs for more info.\n\n\nSupported Parameter: boolean \n$selective\n defaults to \nfalse\n.\n\n\n$reply_markup = $telegram-\nforceReply();\n$response = $telegram-\nsendMessage('CHAT_ID', 'Hello World', false, null, $reply_markup);", 
            "title": "Keyboards"
        }, 
        {
            "location": "/usage/keyboards/#keyboards", 
            "text": "One of the coolest things about Telegram Bot API are the new custom keyboards. Whenever your bot sends a message, it can pass along a special keyboard with predefined reply options. Telegram apps that receive the message will display your keyboard to the user. Tapping any of the buttons will immediately send the respective command. This way you can drastically simplify user interaction with your bot.  Telegram currently support text and emoji for your buttons. Here are some custom keyboard examples:", 
            "title": "Keyboards"
        }, 
        {
            "location": "/usage/keyboards/#reply-keyboard-markup", 
            "text": "The below example will send a message and automatically show a custom keyboard.\nSince we passed third parameter as true, the keyboard will be shown only once.  See  ReplyKeyboardMarkup  docs for a list of supported parameters and other info.  Example:  $keyboard = [\n    ['7', '8', '9'],\n    ['4', '5', '6'],\n    ['1', '2', '3'],\n         ['0']\n];\n\n$reply_markup = $telegram- replyKeyboardMarkup($keyboard, true, true);\n$response = $telegram- sendMessage('CHAT_ID', 'Hello World', false, null, $reply_markup);\n\n$messageId = $response- getMessageId();", 
            "title": "Reply Keyboard Markup"
        }, 
        {
            "location": "/usage/keyboards/#reply-keyboard-hide", 
            "text": "Telegram clients will hide the current custom keyboard and display the default letter-keyboard.\nSee  ReplyKeyboardHide  docs for more info.  Supported Parameter: boolean  $selective  defaults to  false .  $reply_markup = $telegram- replyKeyboardHide();\n$response = $telegram- sendMessage('CHAT_ID', 'Hello World', false, null, $reply_markup);", 
            "title": "Reply Keyboard Hide"
        }, 
        {
            "location": "/usage/keyboards/#force-reply", 
            "text": "Shows reply interface to the user, as if they manually selected the bot\u2018s message and tapped \u2019Reply'.\nSee  ForceReply  docs for more info.  Supported Parameter: boolean  $selective  defaults to  false .  $reply_markup = $telegram- forceReply();\n$response = $telegram- sendMessage('CHAT_ID', 'Hello World', false, null, $reply_markup);", 
            "title": "Force Reply"
        }, 
        {
            "location": "/usage/webhook-updates/", 
            "text": "Webhook and Updates\n\n\nGetting Updates\n\n\nThere are two mutually exclusive ways of receiving updates for your bot \u2014 the \ngetUpdates()\n method on one hand and Webhooks on the other. Incoming updates are stored on the server until the bot receives them either way, but they will not be kept longer than 24 hours.\n\n\nRegardless of which option you choose, you will receive JSON-serialized Update objects as a result.\n\n\nGetting Updates Via Webhook\n\n\nIn order to receive updates via a Webhook, You first need to tell your webhook URL to Telegram. You can use \nsetWebhook($url)\n method to specify a url and receive incoming updates via an outgoing webhook.\n\n\nWhenever there is an update for the bot, Telegram will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, Telegram will give up after a reasonable amount of attempts.\n\n\nIf you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g. \nhttps://www.example.com/\ntoken\n. Since nobody else knows your bot's token, you can be pretty sure it's Telegram who made the request.\n\n\nSee \nsetWebhook\n docs for a list of supported parameters and other info.\n\n\n// Standalone\n$response = $telegram-\nsetWebhook('https://example.com/\ntoken\n/webhook');\n\n// Laravel - Setup a POST route.\n$response = Telegram::setWebhook('https://example.com/\ntoken\n/webhook');\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nYou will not be able to receive updates using \ngetUpdates()\n for as long as an outgoing webhook is set up.\n\n\n\n\n\n\nTo use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.\n\n\n\n\n\n\nPorts currently supported \nfor Webhooks\n: \n443, 80, 88, 8443\n.\n\n\n\n\n\n\n\n\nOnce you set the webhook, You can then use the below function to retrieve the updates that are sent to your Webhook URL. The function returns an array of \nUpdate\n objects.\n\n\n// Standalone\n$updates = $telegram-\ngetWebhookUpdates();\n\n// Laravel - Put this inside the POST route /\ntoken\n/webhook\n$updates = Telegram::getWebhookUpdates();\n\n\n\n\nRemoving Webhook\n\n\nTo remove a webhook (if it was set before).\n\n\n// Standalone\n$response = $telegram-\nremoveWebhook();\n\n// Laravel\n$response = Telegram::removeWebhook();\n\n\n\n\nGetting Updates Manually\n\n\nYou can use \ngetUpdates()\n method to receive incoming updates using long polling (\nwiki\n). An Array of Update objects is returned.\n\n\nSee \ngetUpdates\n docs for a list of supported parameters and other info.\n\n\n// Standalone\n$response = $telegram-\ngetUpdates();\n\n// Laravel\n$response = Telegram::getUpdates();\n\n\n\n\n\n\nNotes\n\n\n\n\n\n\nThis method will not work if an outgoing webhook is set up.\n\n\n\n\n\n\nIn order to avoid getting duplicate updates, recalculate \noffset\n after each server response.", 
            "title": "Webhook & Updates"
        }, 
        {
            "location": "/usage/webhook-updates/#webhook-and-updates", 
            "text": "", 
            "title": "Webhook and Updates"
        }, 
        {
            "location": "/usage/webhook-updates/#getting-updates", 
            "text": "There are two mutually exclusive ways of receiving updates for your bot \u2014 the  getUpdates()  method on one hand and Webhooks on the other. Incoming updates are stored on the server until the bot receives them either way, but they will not be kept longer than 24 hours.  Regardless of which option you choose, you will receive JSON-serialized Update objects as a result.", 
            "title": "Getting Updates"
        }, 
        {
            "location": "/usage/webhook-updates/#getting-updates-via-webhook", 
            "text": "In order to receive updates via a Webhook, You first need to tell your webhook URL to Telegram. You can use  setWebhook($url)  method to specify a url and receive incoming updates via an outgoing webhook.  Whenever there is an update for the bot, Telegram will send an HTTPS POST request to the specified url, containing a JSON-serialized Update. In case of an unsuccessful request, Telegram will give up after a reasonable amount of attempts.  If you'd like to make sure that the Webhook request comes from Telegram, we recommend using a secret path in the URL, e.g.  https://www.example.com/ token . Since nobody else knows your bot's token, you can be pretty sure it's Telegram who made the request.  See  setWebhook  docs for a list of supported parameters and other info.  // Standalone\n$response = $telegram- setWebhook('https://example.com/ token /webhook');\n\n// Laravel - Setup a POST route.\n$response = Telegram::setWebhook('https://example.com/ token /webhook');   Notes    You will not be able to receive updates using  getUpdates()  for as long as an outgoing webhook is set up.    To use a self-signed certificate, you need to upload your public key certificate using certificate parameter. Please upload as InputFile, sending a String will not work.    Ports currently supported  for Webhooks :  443, 80, 88, 8443 .     Once you set the webhook, You can then use the below function to retrieve the updates that are sent to your Webhook URL. The function returns an array of  Update  objects.  // Standalone\n$updates = $telegram- getWebhookUpdates();\n\n// Laravel - Put this inside the POST route / token /webhook\n$updates = Telegram::getWebhookUpdates();  Removing Webhook  To remove a webhook (if it was set before).  // Standalone\n$response = $telegram- removeWebhook();\n\n// Laravel\n$response = Telegram::removeWebhook();", 
            "title": "Getting Updates Via Webhook"
        }, 
        {
            "location": "/usage/webhook-updates/#getting-updates-manually", 
            "text": "You can use  getUpdates()  method to receive incoming updates using long polling ( wiki ). An Array of Update objects is returned.  See  getUpdates  docs for a list of supported parameters and other info.  // Standalone\n$response = $telegram- getUpdates();\n\n// Laravel\n$response = Telegram::getUpdates();   Notes    This method will not work if an outgoing webhook is set up.    In order to avoid getting duplicate updates, recalculate  offset  after each server response.", 
            "title": "Getting Updates Manually"
        }, 
        {
            "location": "/upgrade/", 
            "text": "Upgrade Guide\n\n\nPlease make sure you are viewing this file on the master branch. Check out the \nCHANGELOG\n for detailed info on whats changed.\n\n\nUpgrading To 1.0 from 0.x\n\n\nThere are some breaking and major changes in this new version. Follow the below instructions to apply the changes.\n\n\nUpgrading Your Composer Dependency\n\n\nTo update the package in composer, fire the following command in your terminal:\n\n\n$ composer require irazasyed/telegram-bot-sdk ^1.0\n\n\n\nUpdating Namespace\n\n\nIn this version, The package's namespace has been renamed from \nIrazasyed\\Telegram\n to \nTelegram\\Bot\n. So you need to update the namespace across your project wherever you're injecting any of the classes from the Package.\n\n\nInitializing Library (For Standalone Usage Only)\n\n\nSince the namespace has been changed, You need to update the way you initialise the library as well. Change \nIrazasyed\\Telegram\\Telegram\n to \nTelegram\\Bot\\Api\n and you can initialize like below:\n\n\n$telegram = new Telegram\\Bot\\Api($token);\n\n\n\n\nUpdating \nsendAudio\n Method\n\n\nIf you're using \nsendAudio()\n method anywhere in your project, Make sure you update that as per the new parameters and API change. Refer the \nCHANGELOG\n and API \nfile\n.\n\n\nUpgrading To 1.0 in Laravel / Lumen\n\n\nAddition to the above instructions, You also need to apply the below instructions to get the package working in your Laravel or Lumen Project.\n\n\nUpdate Service Provider\n\n\nUpdate the \nproviders\n array in \nconfig/app.php\n configuration file.\n\n\nFROM:\n \n\n\nIrazasyed\\Telegram\\Laravel\\TelegramServiceProvider::class\n\n\n\n\nTO:\n\n\nTelegram\\Bot\\Laravel\\TelegramServiceProvider::class\n\n\n\n\nUpdate Facade\n\n\nIf you use facade, then you need to update the \naliases\n array in \nconfig/app.php\n configuration file.\n\n\nFROM:\n\n\n'Telegram'  =\n Irazasyed\\Telegram\\Laravel\\Facades\\Telegram::class\n\n\n\n\nTO:\n\n\n'Telegram'  =\n Telegram\\Bot\\Laravel\\Facades\\Telegram::class\n\n\n\n\nRepublish Configuration File\n\n\nFire the following command to apply the new changes. \nPlease note\n, The below command will overwrite your current changes to the config file, So take a backup before firing this command:\n\n\nphp artisan vendor:publish --provider=\"Telegram\\Bot\\Laravel\\TelegramServiceProvider\" --force\n\n\n\nThat's all folks, Enjoy! \n\n\nAlways make sure to update the package in your project to latest version to apply all the bug-fixes, security updates, tweaks and other cool new features.", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/upgrade/#upgrade-guide", 
            "text": "Please make sure you are viewing this file on the master branch. Check out the  CHANGELOG  for detailed info on whats changed.", 
            "title": "Upgrade Guide"
        }, 
        {
            "location": "/upgrade/#upgrading-to-10-from-0x", 
            "text": "There are some breaking and major changes in this new version. Follow the below instructions to apply the changes.  Upgrading Your Composer Dependency  To update the package in composer, fire the following command in your terminal:  $ composer require irazasyed/telegram-bot-sdk ^1.0  Updating Namespace  In this version, The package's namespace has been renamed from  Irazasyed\\Telegram  to  Telegram\\Bot . So you need to update the namespace across your project wherever you're injecting any of the classes from the Package.  Initializing Library (For Standalone Usage Only)  Since the namespace has been changed, You need to update the way you initialise the library as well. Change  Irazasyed\\Telegram\\Telegram  to  Telegram\\Bot\\Api  and you can initialize like below:  $telegram = new Telegram\\Bot\\Api($token);  Updating  sendAudio  Method  If you're using  sendAudio()  method anywhere in your project, Make sure you update that as per the new parameters and API change. Refer the  CHANGELOG  and API  file .  Upgrading To 1.0 in Laravel / Lumen  Addition to the above instructions, You also need to apply the below instructions to get the package working in your Laravel or Lumen Project.  Update Service Provider  Update the  providers  array in  config/app.php  configuration file.  FROM:    Irazasyed\\Telegram\\Laravel\\TelegramServiceProvider::class  TO:  Telegram\\Bot\\Laravel\\TelegramServiceProvider::class  Update Facade  If you use facade, then you need to update the  aliases  array in  config/app.php  configuration file.  FROM:  'Telegram'  =  Irazasyed\\Telegram\\Laravel\\Facades\\Telegram::class  TO:  'Telegram'  =  Telegram\\Bot\\Laravel\\Facades\\Telegram::class  Republish Configuration File  Fire the following command to apply the new changes.  Please note , The below command will overwrite your current changes to the config file, So take a backup before firing this command:  php artisan vendor:publish --provider=\"Telegram\\Bot\\Laravel\\TelegramServiceProvider\" --force  That's all folks, Enjoy!   Always make sure to update the package in your project to latest version to apply all the bug-fixes, security updates, tweaks and other cool new features.", 
            "title": "Upgrading To 1.0 from 0.x"
        }, 
        {
            "location": "/changelog/", 
            "text": "Change Log\n\n\nAll notable changes to this project will be documented in this file.\nThis project adheres to \nSemantic Versioning\n.\n\n\nUnreleased\n\n\n1.0.0\n - 2015-09-08\n\n\nAdded\n\n\n\n\nNew \nsendVoice()\n method as per API Changes - Thanks @jonnywilliamson (\n#19\n).\n\n\nBranch Alias to Composer to install \ndev-master\n easily.\n\n\nCommands System: Automated Inbound Commands Handler.\n\n\nCommands Handler Support for Laravel.\n\n\nCommand Bus Methods to Super Class.\n\n\nDefault Help Command.\n\n\nChat Actions Helper Class.\n\n\nCHANGELOG File.\n\n\nMagic Methods Documentation for Commands Class and Object Classes - Thanks @jonnywilliamson (\n#26\n).\n\n\nAPI Object Classes Magic Method PHPDocs - Thanks @jonnywilliamson (\n#30\n).\n\n\nNew Documentation Page.\n\n\nTelegram Bot SDK \nAPI Docs\n.\n\n\nUpgrade\n Guide.\n\n\nMethods to Detect and Determine Message/Update Type.\n\n\n\n\nChanged\n\n\n\n\nuploadFile()\n method to support loading resource directly - Thanks @rkhitin - (\n#17\n).\n\n\nAdded optional \nperformer\n and \ntitle\n fields to \nsendAudio()\n as per official API Changes - Thanks @jonnywilliamson (\n#19\n) - \n[BC]\n.\n\n\nAdded \ncertificate\n param to \nsetWebhook()\n method as per Official API Changes.\n\n\nRefactor Upload File Method.\n\n\nFormat Code, Simplify FQNs, Code Cleanup and Revise Doc Blocks.\n\n\nRevise Token Exception Text.\n\n\nClean Up Base Object Class.\n\n\nRename Namespace from \nIrazasyed\\Telegram\n to \nTelegram\\Bot\n - \n[BC]\n.\n\n\nRename \nTelegram.php\n - \nIrazasyed\\Telegram\\Telegram\n to \nApi.php\n - \nTelegram\\Bot\\Api\n - \n[BC]\n.\n\n\nMove PHPDocs to its own home.\n\n\nRevise README.\n\n\n\n\n0.2.6\n - 2015-08-18\n\n\nAdded\n\n\n\n\nVideo Caption Support to \nsendVideo()\n method as per Official API Changes - Thanks @jonnywilliamson.\n\n\nDuration Support to \nsendVideo()\n and \nsendAudio()\n methods as per Official API Changes.\n\n\n\n\nFixed\n\n\n\n\nContact Object Namespace - Thanks @DmitryNek\n\n\nHTTPClientHandlerInterface\n Laravel Config Typo.\n\n\n\n\n0.2.5\n - 2015-07-20\n\n\nFixed\n\n\n\n\nCustom HTTP Client Handler Not Found - Thanks @codengine.\n\n\n\n\nRemoved\n\n\n\n\ngetLastName()\n example from README.\n\n\n\n\n0.2.4\n - 2015-07-12\n\n\nAdded\n\n\n\n\nInstallation Requirements in README.\n\n\n\n\nChanged\n\n\n\n\nLaravel Service Provider.\n\n\nRevise README.\n\n\n\n\nRemoved\n\n\n\n\nLaravel 4 Support.\n\n\n\n\n0.2.3\n - 2015-07-12\n\n\nAdded\n\n\n\n\nMessage Object Relatives.\n\n\n\n\nChanged\n\n\n\n\nReplyMarkupKeyboard\n Example in README.\n\n\nComposer Keywords.\n\n\nProfile Links in README.\n\n\n\n\nFixed\n\n\n\n\nInvalid resource type issue (\n#6\n).\n\n\n\n\nRemoved\n\n\n\n\nKeyboardMarkup Class Import Statement.\n\n\n\n\n0.2.2\n - 2015-07-02\n\n\nFixed\n\n\n\n\nIrazasyed\\Telegram\\Exceptions\\TelegramSDKException\n not found issue (\n#4\n).\n\n\n\n\n0.2.1\n - 2015-07-02\n\n\nAdded\n\n\n\n\nrecentMessage()\n to Update object class.\n\n\n\n\nChanged\n\n\n\n\nMake \n$token\n param optional in constructor - Thanks @orloffv issue (\n#1\n).\n\n\n\n\n0.2.0\n - 2015-07-02\n\n\nAdded\n\n\n\n\ngetWebhookUpdates()\n method.\n\n\nDocumentation in README for \ngetWebhookUpdates()\n method.\n\n\nContributing Guidelines.\n\n\nDisclaimer and Note to README.\n\n\nBanner Image in README.\n\n\nLink back to Telegram Bot API Page.\n\n\n\n\nChanged\n\n\n\n\nRefactor \ngetUpdates()\n method.\n\n\nProject LICENSE.\n\n\nRevise README.\n\n\n\n\n0.1.0 - 2015-06-29\n\n\n\n\nInitial Release.", 
            "title": "Change Log"
        }, 
        {
            "location": "/changelog/#change-log", 
            "text": "All notable changes to this project will be documented in this file.\nThis project adheres to  Semantic Versioning .", 
            "title": "Change Log"
        }, 
        {
            "location": "/changelog/#unreleased", 
            "text": "", 
            "title": "Unreleased"
        }, 
        {
            "location": "/changelog/#100-2015-09-08", 
            "text": "Added   New  sendVoice()  method as per API Changes - Thanks @jonnywilliamson ( #19 ).  Branch Alias to Composer to install  dev-master  easily.  Commands System: Automated Inbound Commands Handler.  Commands Handler Support for Laravel.  Command Bus Methods to Super Class.  Default Help Command.  Chat Actions Helper Class.  CHANGELOG File.  Magic Methods Documentation for Commands Class and Object Classes - Thanks @jonnywilliamson ( #26 ).  API Object Classes Magic Method PHPDocs - Thanks @jonnywilliamson ( #30 ).  New Documentation Page.  Telegram Bot SDK  API Docs .  Upgrade  Guide.  Methods to Detect and Determine Message/Update Type.   Changed   uploadFile()  method to support loading resource directly - Thanks @rkhitin - ( #17 ).  Added optional  performer  and  title  fields to  sendAudio()  as per official API Changes - Thanks @jonnywilliamson ( #19 ) -  [BC] .  Added  certificate  param to  setWebhook()  method as per Official API Changes.  Refactor Upload File Method.  Format Code, Simplify FQNs, Code Cleanup and Revise Doc Blocks.  Revise Token Exception Text.  Clean Up Base Object Class.  Rename Namespace from  Irazasyed\\Telegram  to  Telegram\\Bot  -  [BC] .  Rename  Telegram.php  -  Irazasyed\\Telegram\\Telegram  to  Api.php  -  Telegram\\Bot\\Api  -  [BC] .  Move PHPDocs to its own home.  Revise README.", 
            "title": "1.0.0 - 2015-09-08"
        }, 
        {
            "location": "/changelog/#026-2015-08-18", 
            "text": "Added   Video Caption Support to  sendVideo()  method as per Official API Changes - Thanks @jonnywilliamson.  Duration Support to  sendVideo()  and  sendAudio()  methods as per Official API Changes.   Fixed   Contact Object Namespace - Thanks @DmitryNek  HTTPClientHandlerInterface  Laravel Config Typo.", 
            "title": "0.2.6 - 2015-08-18"
        }, 
        {
            "location": "/changelog/#025-2015-07-20", 
            "text": "Fixed   Custom HTTP Client Handler Not Found - Thanks @codengine.   Removed   getLastName()  example from README.", 
            "title": "0.2.5 - 2015-07-20"
        }, 
        {
            "location": "/changelog/#024-2015-07-12", 
            "text": "Added   Installation Requirements in README.   Changed   Laravel Service Provider.  Revise README.   Removed   Laravel 4 Support.", 
            "title": "0.2.4 - 2015-07-12"
        }, 
        {
            "location": "/changelog/#023-2015-07-12", 
            "text": "Added   Message Object Relatives.   Changed   ReplyMarkupKeyboard  Example in README.  Composer Keywords.  Profile Links in README.   Fixed   Invalid resource type issue ( #6 ).   Removed   KeyboardMarkup Class Import Statement.", 
            "title": "0.2.3 - 2015-07-12"
        }, 
        {
            "location": "/changelog/#022-2015-07-02", 
            "text": "Fixed   Irazasyed\\Telegram\\Exceptions\\TelegramSDKException  not found issue ( #4 ).", 
            "title": "0.2.2 - 2015-07-02"
        }, 
        {
            "location": "/changelog/#021-2015-07-02", 
            "text": "Added   recentMessage()  to Update object class.   Changed   Make  $token  param optional in constructor - Thanks @orloffv issue ( #1 ).", 
            "title": "0.2.1 - 2015-07-02"
        }, 
        {
            "location": "/changelog/#020-2015-07-02", 
            "text": "Added   getWebhookUpdates()  method.  Documentation in README for  getWebhookUpdates()  method.  Contributing Guidelines.  Disclaimer and Note to README.  Banner Image in README.  Link back to Telegram Bot API Page.   Changed   Refactor  getUpdates()  method.  Project LICENSE.  Revise README.", 
            "title": "0.2.0 - 2015-07-02"
        }, 
        {
            "location": "/changelog/#010-2015-06-29", 
            "text": "Initial Release.", 
            "title": "0.1.0 - 2015-06-29"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\nContributions are \nwelcome\n, and are accepted via pull requests. Please review these guidelines before submitting any pull requests.\n\n\nGuidelines\n\n\n\n\n\n\nFollow Standards\n - Please follow the \nPSR-2 Coding Standard\n and \nPHP-FIG Naming Conventions\n.\n\n\n\n\n\n\nDocument any change in behaviour\n - Make sure the \nCHANGELOG.md\n and any other relevant documentation are kept up-to-date.\n\n\n\n\n\n\nConsider our release cycle\n - We try to follow \nSemVer\n. Randomly breaking public APIs is not an option.\n\n\n\n\n\n\nSend coherent history\n - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please \nsquash them\n before submitting.\n\n\n\n\n\n\nRebase\n - You may also need to \nrebase\n to avoid merge conflicts.\n\n\n\n\n\n\nHappy coding\n!", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Contributions are  welcome , and are accepted via pull requests. Please review these guidelines before submitting any pull requests.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#guidelines", 
            "text": "Follow Standards  - Please follow the  PSR-2 Coding Standard  and  PHP-FIG Naming Conventions .    Document any change in behaviour  - Make sure the  CHANGELOG.md  and any other relevant documentation are kept up-to-date.    Consider our release cycle  - We try to follow  SemVer . Randomly breaking public APIs is not an option.    Send coherent history  - Make sure each individual commit in your pull request is meaningful. If you had to make multiple intermediate commits while developing, please  squash them  before submitting.    Rebase  - You may also need to  rebase  to avoid merge conflicts.    Happy coding !", 
            "title": "Guidelines"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nCopyright (c) 2015, Syed Irfaq R. \nhttps://github.com/irazasyed\n\n\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of test nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Copyright (c) 2015, Syed Irfaq R.  https://github.com/irazasyed  All rights reserved.  Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.    Neither the name of test nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }
    ]
}